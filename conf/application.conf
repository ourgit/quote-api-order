akka {
  actor {
    warn-about-java-serializer-usage = false
    allow-java-serialization = true
    default-dispatcher {
      # This will be used if you have set "executor = "fork-join-executor""
      fork-join-executor {
        # Min number of threads to cap factor-based parallelism number to
        parallelism-min = 4
        # The parallelism factor is used to determine thread pool size using the
        # following formula: ceil(available processors * factor). Resulting size
        # is then bounded by the parallelism-min and parallelism-max values.
        parallelism-factor = 2.0
        # Max number of threads to cap factor-based parallelism number to
        parallelism-max = 16
        # Setting to "FIFO" to use queue like peeking mode which "poll" or "LIFO" to use stack
        # like peeking mode which "pop".
        task-peeking-mode = "FIFO"
      }
    }
    serializers {
         jackson-json = "akka.serialization.jackson.JacksonJsonSerializer"
         proto = "akka.remote.serialization.ProtobufSerializer"
    }
    serialization-bindings {
         "io.ebean.Model" = jackson-json
         "actor.ActorProtocol" = jackson-json
         "com.fasterxml.jackson.databind.JsonSerializable" = jackson-json
         "com.google.protobuf.Message" = proto
    }
  }
  loglevel = "INFO"
  stdout-loglevel = "INFO"
}
akka.actor.serialize-messages = off
play.http.secret.key = "XdskielxcsIPSDf;sjdxcsdpiwer;xcvsdfilklexxviolkxdfXv-0902923sdf"

play.modules {
}

play.i18n.langs = [ "zh-CN", "zh-TW","en" ]

## Play HTTP settings
# ~~~~~
play.http {

  errorHandler = null

  session {
  }

  flash {
    # Sets the cookie to be sent only over HTTPS.
    #secure = true

    # Sets the cookie to be accessed only by the server.
    #httpOnly = true
  }
}

## Netty Provider
# https://www.playframework.com/documentation/latest/SettingsNetty
# ~~~~~
play.server.netty {
  # Whether the Netty wire should be logged
  #log.wire = true

  # If you run Play on Linux, you can use Netty's native socket transport
  # for higher performance with less garbage.
  transport = "native"
}

play.ws {
  ssl {
  }
}
play.cache {
  # If you want to bind several caches, you can bind the individually
  #bindCaches = ["db-cache", "user-cache", "session-cache"]
  redis.bindCaches = ["db-cache", "user-cache", "session-cache"]
}

evolutionplugin = disabled
play.evolutions {
  # You can disable evolutions for a specific datasource if necessary
  db.default.enabled = false
}

## Database Connection Pool
# https://www.playframework.com/documentation/latest/SettingsJDBC
# ~~~~~
# Play doesn't require a JDBC database to run, but you can easily enable one.
#
# libraryDependencies += jdbc
#
play.db {
  # The combination of these two settings results in "db.default" as the
  # default JDBC pool:
  config = "db"
  default = "default"
  # Play uses HikariCP as the default connection pool.  You can override
  # settings by changing the prototype:
  prototype {
    # Sets a fixed JDBC connection pool size of 50
    #hikaricp.minimumIdle = 50
    #hikaricp.maximumPoolSize = 50
  }
}

ebean.default = "models.*"
# Number of database connections
# See https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing
fixedConnectionPool = 9

# Set Hikari to fixed size
play.db {
  prototype {
    hikaricp.minimumIdle = ${fixedConnectionPool}
    hikaricp.maximumPoolSize = ${fixedConnectionPool}
  }
}
# Job queue sized to HikariCP connection pool
database.dispatcher {
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor {
    fixed-pool-size = ${fixedConnectionPool}
  }
}
db {
  default.driver=com.mysql.cj.jdbc.Driver
  default.url="jdbc:mysql://127.0.0.1/quote?allowPublicKeyRetrieval=True&characterEncoding=UTF-8&serverTimezone=GMT%2B8"
  default.dbname=deal
  default.username=debian-sys-maint
  default.password="NrgcJU2rSmxXMYnA"
  default.host="127.0.0.1"
  # You can turn on SQL logging for any datasource
  # https://www.playframework.com/documentation/latest/Highlights25#Logging-SQL-statements
  default.logSql=false
}
play.modules.enabled += "play.api.cache.redis.RedisCacheModule"
play.modules.enabled += services.CustomCacheModule
play.cache.redis {
  bind-default: false
  default-cache: "redis"
  source = custom
  host = 127.0.0.1
  # redis server: port
  port = 6379
  # redis server: database number (optional)
  database = 1
  # authentication password (optional)
  password = "IODscsds@#ssd&#4sgo32342"
  refresh-minute = 10
}
play.filters.enabled += play.filters.hosts.AllowedHostsFilter
play.filters.hosts {
  # Allow requests to example.com, its subdomains, and localhost:9000.
   allowed = ["q.klunion.com"]
}

#redis.uri="redis://127.0.0.1:6379"

# SMTP configuration
#include "smtp.conf"
# play-easymail configuration
#include "play-easymail.conf"


#mail.smtp.host=smtp.taldius.net
#mail.smtp.user=jfp
#mail.smtp.pass=topsecret
#mail.smtp.channel=starttls
#mail.smtp.channel=ssl

#play.ws.ssl {
#  keyManager = {
#    stores = [
#      { clientType: "PKCS12", path: "apiclient_cert.p12", password: "1606900210" }
#    ]
#  }
#}
play.ws.compressionEnabled = true
play.ws.timeout.connection = 20s
play.ws.timeout.idle = 20s
play.ws.timeout.request = 30s
play.ws.ahc.maxConnectionsPerHost = 100000
play.ws.ahc.maxConnectionsTotal = 1000000

play.allowGlobalApplication = false
play.filters.csrf.header.bypassHeaders {
  X-Requested-With = "*"
  Csrf-Token = "nocheck"
}
token_expire_time = 2592000
play.filters.enabled += "play.filters.gzip.GzipFilter"
play.filters.gzip.compressionLevel = 9
play.filters.gzip {
    contentType {
        # If non empty, then a response will only be compressed if its content type is in this list.
        whiteList = [ "text/*", "application/javascript", "application/json" ]
        # The black list is only used if the white list is empty.
        # Compress all responses except the ones whose content type is in this list.
        blackList = []
    }
}

smtp.host=smtp.gmail.com
smtp.port=465
smtp.ssl=true
smtp.user="ray.Renoseeker@gmail.com"
smtp.password="Cproof2020"

play.mailer {
  host=smtp.gmail.com
  port=465
  ssl=true
  auth=true
  user="ray.Renoseeker@gmail.com"
  password="Cproof2020"
  debug=yes

#   host = "example.com" // (mandatory)
#   port = 25 // (defaults to 25)
#   ssl = no // (defaults to no)
#   tls = no // (defaults to no)
#   tlsRequired = no // (defaults to no)
#   user = null // (optional)
#   password = null // (optional)
#   debug = no // (defaults to no, to take effect you also need to set the log level to "DEBUG" for the "play.mailer" logger)
#   timeout = null // (defaults to 60s in milliseconds)
#   connectiontimeout = null // (defaults to 60s in milliseconds)
#   mock = no // (defaults to no, will only log all the email properties instead of sending an email)
#   props {
#     // Additional SMTP properties used by JavaMail. Can override existing configuration keys from above.
#     // A given property will be set for both the "mail.smtp.*" and the "mail.smtps.*" prefix.
#     // For a list of properties see:
#     // https://javaee.github.io/javamail/docs/api/com/sun/mail/smtp/package-summary.html#properties
#
#     // Example:
#     // To set the local host name used in the SMTP HELO or EHLO command:
#     // localhost = 127.0.0.1
#     // Results in "mail.smtp.localhost=127.0.0.1" and "mail.smtps.localhost=127.0.0.1" in the JavaMail session.
#   }
}